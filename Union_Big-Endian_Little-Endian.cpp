#include "stdafx.h"

#include <stdlib.h>
#include <stdio.h>
#include <iostream>
using namespace std;

/***********************************************
union 维护足够的空间来置放多个数据成员中的“一种”，
而不是为每一个数据成员配置空间，在union 中所有的数
据成员共用一个空间，同一时间只能储存其中一个数据成员，
所有的数据成员具有相同的起始地址。
************************************************/
union {
	int s;
	char c[sizeof(int)];
} un;

/************************************************************************
1. 大端模式（Big_endian）：多字节数据的高字节存储在低地址中，而字数据的低字节则存放在高地址中。
2. 小端模式（Little_endian）：多字节数据的高字节存储在高地址中，而字数据的低字节则存放在低地址中。
3. union型数据所占的空间等于其最大的成员所占的空间。对union型的成员的存取都是相对于该联合体
基地址的偏移量为0 处开始，也就是联合体的访问不论对哪个变量的存取都是从union 的首地址位置开始。
4. PC一般是小端模式。
*************************************************************************/

int main(int argc, char **argv)
{
	un.s = 0x87654321;
	if (sizeof(int) == 4) 
	{
		for (int i = 0; i < 4; ++i)
		{
			printf("un.c[%d] = %x\n", i, un.c[i]); // 分别输出0x21, 0x43, 0x65, 0x87
		}
	}
	else
	{
		printf("sizeof(int)= %d\n", sizeof(int));
	}

	system("pause");
	exit(0);
}
