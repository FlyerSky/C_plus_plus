!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Add	ThreadPool.cpp	/^void ThreadPool::Add(ClosureInterface* task)$/;"	f	class:threadpool::ThreadPool
BlockingQueue	BlockingQueue.h	/^	BlockingQueue() : m_mutex(), m_notEmpty(m_mutex), m_queue()$/;"	f	class:threadpool::BlockingQueue
BlockingQueue	BlockingQueue.h	/^class BlockingQueue : NonCopyable {$/;"	c	namespace:threadpool
BoundedBlockingQueue	BoundedBlockingQueue.h	/^	explicit BoundedBlockingQueue(size_t maxSize)$/;"	f	class:threadpool::BoundedBlockingQueue
BoundedBlockingQueue	BoundedBlockingQueue.h	/^class BoundedBlockingQueue : public NonCopyable {$/;"	c	namespace:threadpool
BoundedQueue	BoundedQueue.h	/^	explicit BoundedQueue(size_t capacity)$/;"	f	class:threadpool::BoundedQueue
BoundedQueue	BoundedQueue.h	/^class BoundedQueue {$/;"	c	namespace:threadpool
Capacity	BoundedQueue.h	/^	size_t Capacity() const$/;"	f	class:threadpool::BoundedQueue
Clear	BoundedQueue.h	/^	void Clear()$/;"	f	class:threadpool::BoundedQueue
Closure0	Closure.h	/^	Closure0(Funct fun)$/;"	f	class:threadpool::Closure0
Closure0	Closure.h	/^class Closure0 : public ClosureInterface$/;"	c	namespace:threadpool
Closure1	Closure.h	/^	Closure1(Funct fun, Arg1 arg1)$/;"	f	class:threadpool::Closure1
Closure1	Closure.h	/^class Closure1 : public ClosureInterface$/;"	c	namespace:threadpool
Closure2	Closure.h	/^	Closure2(Funct fun, Arg1 arg1, Arg2 arg2)$/;"	f	class:threadpool::Closure2
Closure2	Closure.h	/^class Closure2 : public ClosureInterface$/;"	c	namespace:threadpool
Closure3	Closure.h	/^	Closure3(Funct fun, Arg1 arg1, Arg2 arg2, Arg3 arg3)$/;"	f	class:threadpool::Closure3
Closure3	Closure.h	/^class Closure3 : public ClosureInterface$/;"	c	namespace:threadpool
ClosureInterface	Closure.h	/^class ClosureInterface$/;"	c	namespace:threadpool
Condition	Condition.h	/^	explicit Condition(MutexLock& mutex) : m_mutex(mutex)$/;"	f	class:threadpool::Condition
Condition	Condition.h	/^class Condition : NonCopyable {$/;"	c	namespace:threadpool
Empty	BlockingQueue.h	/^	bool Empty() const$/;"	f	class:threadpool::BlockingQueue
Empty	BoundedBlockingQueue.h	/^	bool Empty() const$/;"	f	class:threadpool::BoundedBlockingQueue
Empty	BoundedQueue.h	/^	bool Empty() const$/;"	f	class:threadpool::BoundedQueue
Full	BoundedBlockingQueue.h	/^	bool Full() const$/;"	f	class:threadpool::BoundedBlockingQueue
Full	BoundedQueue.h	/^	bool Full() const$/;"	f	class:threadpool::BoundedQueue
GetPthreadMutex	MutexLock.h	/^	pthread_mutex_t* GetPthreadMutex()$/;"	f	class:threadpool::MutexLock
IThread	Thread.h	/^	IThread() : isStarted(false), isJoined(false) {}$/;"	f	class:threadpool::IThread
IThread	Thread.h	/^class IThread: NonCopyable{$/;"	c	namespace:threadpool
Join	Thread.h	/^	void Join()$/;"	f	class:threadpool::IThread
LL_DEBUG	Logging.h	/^	LL_DEBUG = 0,$/;"	e	enum:threadpool::__anon1
LL_ERROR	Logging.h	/^	LL_ERROR = 3,$/;"	e	enum:threadpool::__anon1
LL_FATAL	Logging.h	/^	LL_FATAL = 4$/;"	e	enum:threadpool::__anon1
LL_INFO	Logging.h	/^	LL_INFO = 1,$/;"	e	enum:threadpool::__anon1
LL_WARNING	Logging.h	/^	LL_WARNING = 2,$/;"	e	enum:threadpool::__anon1
LOG_LEVEL_ARRAY	Logging.h	/^static const char* LOG_LEVEL_ARRAY[] = { "DEBUG", "INFO", "WARNING", "ERROR", "FATAL" };$/;"	m	namespace:threadpool
LOG_TIME_FORMAT	Logging.h	/^static const char* LOG_TIME_FORMAT = "%Y-%m-%d %H:%M:%S";$/;"	m	namespace:threadpool
Lock	MutexLock.h	/^	void Lock()$/;"	f	class:threadpool::MutexLock
Logger	Logging.h	/^	Logger(size_t level, const char* filename, int lineno) : m_level(level)$/;"	f	class:threadpool::Logger
Logger	Logging.h	/^class Logger {$/;"	c	namespace:threadpool
MutexLock	MutexLock.h	/^	MutexLock()$/;"	f	class:threadpool::MutexLock
MutexLock	MutexLock.h	/^class MutexLock : NonCopyable {$/;"	c	namespace:threadpool
MutexLockGuard	MutexLock.h	/^	explicit MutexLockGuard(MutexLock& mutex) : m_mutex(mutex)$/;"	f	class:threadpool::MutexLockGuard
MutexLockGuard	MutexLock.h	/^class MutexLockGuard : NonCopyable {$/;"	c	namespace:threadpool
MutexLockGuard	MutexLock.h	64;"	d
NewClosure	Closure.h	/^ClosureInterface* NewClosure(Obj* obj, T (Obj::* fun)())$/;"	f	namespace:threadpool
NewClosure	Closure.h	/^ClosureInterface* NewClosure(Obj* obj, T (Obj::* fun)(Arg1), Arg1 arg1)$/;"	f	namespace:threadpool
NewClosure	Closure.h	/^ClosureInterface* NewClosure(Obj* obj, T (Obj::* fun)(Arg1, Arg2), Arg1 arg1, Arg2 arg2)$/;"	f	namespace:threadpool
NewClosure	Closure.h	/^ClosureInterface* NewClosure(Obj* obj, T (Obj::* fun)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3)$/;"	f	namespace:threadpool
NewClosure	Closure.h	/^ClosureInterface* NewClosure(T (*fun)())$/;"	f	namespace:threadpool
NewClosure	Closure.h	/^ClosureInterface* NewClosure(T (*fun)(Arg1), Arg1 arg1)$/;"	f	namespace:threadpool
NewClosure	Closure.h	/^ClosureInterface* NewClosure(T (*fun)(Arg1, Arg2), Arg1 arg1, Arg2 arg2)$/;"	f	namespace:threadpool
NewClosure	Closure.h	/^ClosureInterface* NewClosure(T (*fun)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3)$/;"	f	namespace:threadpool
NonCopyable	NonCopyable.h	/^	NonCopyable() {}$/;"	f	class:threadpool::NonCopyable
NonCopyable	NonCopyable.h	/^class NonCopyable {$/;"	c	namespace:threadpool
Notify	Condition.h	/^	void Notify()$/;"	f	class:threadpool::Condition
NotifyAll	Condition.h	/^	void NotifyAll()$/;"	f	class:threadpool::Condition
ObjClosure0	Closure.h	/^	ObjClosure0(Obj* p, Funct fun)$/;"	f	class:threadpool::ObjClosure0
ObjClosure0	Closure.h	/^class ObjClosure0 : public ClosureInterface$/;"	c	namespace:threadpool
ObjClosure1	Closure.h	/^	ObjClosure1(Obj* p, Funct fun, Arg1 arg1)$/;"	f	class:threadpool::ObjClosure1
ObjClosure1	Closure.h	/^class ObjClosure1 : public ClosureInterface$/;"	c	namespace:threadpool
ObjClosure2	Closure.h	/^	ObjClosure2(Obj* p, Funct fun, Arg1 arg1, Arg2 arg2)$/;"	f	class:threadpool::ObjClosure2
ObjClosure2	Closure.h	/^class ObjClosure2 : public ClosureInterface$/;"	c	namespace:threadpool
ObjClosure3	Closure.h	/^	ObjClosure3(Obj* p, Funct fun, Arg1 arg1, Arg2 arg2, Arg3 arg3)$/;"	f	class:threadpool::ObjClosure3
ObjClosure3	Closure.h	/^class ObjClosure3 : public ClosureInterface$/;"	c	namespace:threadpool
Pop	BlockingQueue.h	/^	T Pop()$/;"	f	class:threadpool::BlockingQueue
Pop	BoundedBlockingQueue.h	/^	T Pop()$/;"	f	class:threadpool::BoundedBlockingQueue
Pop	BoundedQueue.h	/^	T Pop()$/;"	f	class:threadpool::BoundedQueue
Push	BlockingQueue.h	/^	void Push(const T& x)$/;"	f	class:threadpool::BlockingQueue
Push	BoundedBlockingQueue.h	/^	void Push(const T& x)$/;"	f	class:threadpool::BoundedBlockingQueue
Push	BoundedQueue.h	/^	void Push(const T& t)$/;"	f	class:threadpool::BoundedQueue
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::Closure0
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::Closure1
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::Closure2
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::Closure3
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::ObjClosure0
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::ObjClosure1
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::ObjClosure2
Run	Closure.h	/^	virtual void Run()$/;"	f	class:threadpool::ObjClosure3
Run	ThreadPool.cpp	/^void Worker::Run()$/;"	f	class:threadpool::Worker
Size	BlockingQueue.h	/^	size_t Size() const$/;"	f	class:threadpool::BlockingQueue
Size	BoundedQueue.h	/^	size_t Size() const$/;"	f	class:threadpool::BoundedQueue
Start	Thread.h	/^	void Start()$/;"	f	class:threadpool::IThread
Start	ThreadPool.cpp	/^void ThreadPool::Start()$/;"	f	class:threadpool::ThreadPool
Stop	ThreadPool.cpp	/^void ThreadPool::Stop()$/;"	f	class:threadpool::ThreadPool
Stream	Logging.h	/^	std::ostream& Stream() {$/;"	f	class:threadpool::Logger
THREADPOOL_BLOCKINGQUEUE_H	BlockingQueue.h	4;"	d
THREADPOOL_BOUNDED_BLOCKING_QUEUE_H	BoundedBlockingQueue.h	2;"	d
THREADPOOL_BOUNDED_QUEUE_H	BoundedQueue.h	4;"	d
THREADPOOL_CLOSURE_H	Closure.h	4;"	d
THREADPOOL_CONDITION_H	Condition.h	4;"	d
THREADPOOL_LOGGING_H	Logging.h	4;"	d
THREADPOOL_MUTEX_LOCK_H	MutexLock.h	4;"	d
THREADPOOL_NONCOPYABLE_H	NonCopyable.h	2;"	d
THREADPOOL_STD_EXTENSION_H	StdExtension.h	2;"	d
THREADPOOL_THREAD_H	Thread.h	4;"	d
THREADPOOL_THREAD_POOL_H	ThreadPool.h	4;"	d
ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool(size_t thread_num) : m_vThreads(thread_num), m_bQueue(thread_num)$/;"	f	class:threadpool::ThreadPool
ThreadPool	ThreadPool.h	/^class ThreadPool : NonCopyable {$/;"	c	namespace:threadpool
Unlock	MutexLock.h	/^	void Unlock()$/;"	f	class:threadpool::MutexLock
Wait	Condition.h	/^	void Wait()$/;"	f	class:threadpool::Condition
Worker	ThreadPool.cpp	/^Worker::Worker(ThreadPool* pool) : m_pthreadPool(pool)$/;"	f	class:threadpool::Worker
Worker	ThreadPool.h	/^class Worker : public IThread {$/;"	c	namespace:threadpool
XCHECK	Logging.h	24;"	d
XLOG	Logging.h	23;"	d
capacity	BoundedBlockingQueue.h	/^	size_t capacity() const$/;"	f	class:threadpool::BoundedBlockingQueue
isIn	StdExtension.h	/^bool isIn(const ContainType& contain, const KeyType& key)$/;"	f	namespace:std
isJoined	Thread.h	/^	bool isJoined;$/;"	m	class:threadpool::IThread
isStarted	Thread.h	/^	bool isStarted;$/;"	m	class:threadpool::IThread
m_arg1	Closure.h	/^	Arg1 m_arg1;$/;"	m	class:threadpool::Closure1
m_arg1	Closure.h	/^	Arg1 m_arg1;$/;"	m	class:threadpool::Closure2
m_arg1	Closure.h	/^	Arg1 m_arg1;$/;"	m	class:threadpool::Closure3
m_arg1	Closure.h	/^	Arg1 m_arg1;$/;"	m	class:threadpool::ObjClosure1
m_arg1	Closure.h	/^	Arg1 m_arg1;$/;"	m	class:threadpool::ObjClosure2
m_arg1	Closure.h	/^	Arg1 m_arg1;$/;"	m	class:threadpool::ObjClosure3
m_arg2	Closure.h	/^	Arg2 m_arg2;$/;"	m	class:threadpool::Closure2
m_arg2	Closure.h	/^	Arg2 m_arg2;$/;"	m	class:threadpool::Closure3
m_arg2	Closure.h	/^	Arg2 m_arg2;$/;"	m	class:threadpool::ObjClosure2
m_arg2	Closure.h	/^	Arg2 m_arg2;$/;"	m	class:threadpool::ObjClosure3
m_arg3	Closure.h	/^	Arg3 m_arg3;$/;"	m	class:threadpool::Closure3
m_arg3	Closure.h	/^	Arg3 m_arg3;$/;"	m	class:threadpool::ObjClosure3
m_bQueue	ThreadPool.h	/^	BoundedBlockingQueue<ClosureInterface*> m_bQueue;$/;"	m	class:threadpool::ThreadPool
m_capacity	BoundedQueue.h	/^	const size_t m_capacity;$/;"	m	class:threadpool::BoundedQueue
m_circular_buffer	BoundedQueue.h	/^	vector<T> m_circular_buffer;$/;"	m	class:threadpool::BoundedQueue
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::Closure0
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::Closure1
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::Closure2
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::Closure3
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::ObjClosure0
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::ObjClosure1
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::ObjClosure2
m_fun	Closure.h	/^	Funct m_fun;$/;"	m	class:threadpool::ObjClosure3
m_head	BoundedQueue.h	/^	size_t m_head;$/;"	m	class:threadpool::BoundedQueue
m_level	Logging.h	/^	size_t m_level;$/;"	m	class:threadpool::Logger
m_mutex	BlockingQueue.h	/^	mutable MutexLock m_mutex;$/;"	m	class:threadpool::BlockingQueue
m_mutex	BoundedBlockingQueue.h	/^	mutable MutexLock	m_mutex;$/;"	m	class:threadpool::BoundedBlockingQueue
m_mutex	Condition.h	/^	MutexLock& m_mutex;$/;"	m	class:threadpool::Condition
m_mutex	MutexLock.h	/^	MutexLock& m_mutex;$/;"	m	class:threadpool::MutexLockGuard
m_mutex	MutexLock.h	/^	pthread_mutex_t m_mutex;$/;"	m	class:threadpool::MutexLock
m_notEmpty	BlockingQueue.h	/^	Condition m_notEmpty;$/;"	m	class:threadpool::BlockingQueue
m_notEmpty	BoundedBlockingQueue.h	/^	Condition		m_notEmpty;$/;"	m	class:threadpool::BoundedBlockingQueue
m_notFull	BoundedBlockingQueue.h	/^	Condition		m_notFull;$/;"	m	class:threadpool::BoundedBlockingQueue
m_pCond	Condition.h	/^	pthread_cond_t m_pCond;$/;"	m	class:threadpool::Condition
m_pObj	Closure.h	/^	Obj* m_pObj;$/;"	m	class:threadpool::ObjClosure0
m_pObj	Closure.h	/^	Obj* m_pObj;$/;"	m	class:threadpool::ObjClosure1
m_pObj	Closure.h	/^	Obj* m_pObj;$/;"	m	class:threadpool::ObjClosure2
m_pObj	Closure.h	/^	Obj* m_pObj;$/;"	m	class:threadpool::ObjClosure3
m_pthreadPool	ThreadPool.h	/^	ThreadPool* m_pthreadPool;$/;"	m	class:threadpool::Worker
m_queue	BlockingQueue.h	/^	std::queue<T> m_queue;$/;"	m	class:threadpool::BlockingQueue
m_queue	BoundedBlockingQueue.h	/^	BoundedQueue<T>		m_queue;$/;"	m	class:threadpool::BoundedBlockingQueue
m_size	BoundedQueue.h	/^	size_t m_size;$/;"	m	class:threadpool::BoundedQueue
m_stream	Logging.h	/^	std::ostringstream m_stream;$/;"	m	class:threadpool::Logger
m_tail	BoundedQueue.h	/^	size_t m_tail;$/;"	m	class:threadpool::BoundedQueue
m_thread	Thread.h	/^	pthread_t m_thread;$/;"	m	class:threadpool::IThread
m_vThreads	ThreadPool.h	/^	vector<IThread*> m_vThreads;$/;"	m	class:threadpool::ThreadPool
operator <<	StdExtension.h	/^basic_string<T>& operator<<(basic_string<T>& s, ifstream& ifs)$/;"	f	namespace:std
operator <<	StdExtension.h	/^inline ostream& operator<<(ostream& os, const vector<string>& v)$/;"	f	namespace:std
operator <<	StdExtension.h	/^ofstream& operator<<(ofstream& ofs, const basic_string<T>& s)$/;"	f	namespace:std
operator <<	StdExtension.h	/^ostream& operator<<(ostream& os, const deque<T>& dq)$/;"	f	namespace:std
operator <<	StdExtension.h	/^ostream& operator<<(ostream& os, const map<T1, T2> mp)$/;"	f	namespace:std
operator <<	StdExtension.h	/^ostream& operator<<(ostream& os, const pair<T1, T2>& pr)$/;"	f	namespace:std
operator <<	StdExtension.h	/^ostream& operator<<(ostream& os, const set<T> st)$/;"	f	namespace:std
operator <<	StdExtension.h	/^ostream& operator<<(ostream& os, const std::unordered_map<T1, T2> mp)$/;"	f	namespace:std
operator <<	StdExtension.h	/^ostream& operator<<(ostream& os, const vector<T>& v)$/;"	f	namespace:std
operator <<	StdExtension.h	/^string& operator<<(string& str, const T& obj)$/;"	f	namespace:std
print	StdExtension.h	31;"	d
size	BoundedBlockingQueue.h	/^	size_t size() const$/;"	f	class:threadpool::BoundedBlockingQueue
std	StdExtension.h	/^namespace std {$/;"	n
threadpool	BlockingQueue.h	/^namespace threadpool {$/;"	n
threadpool	BoundedBlockingQueue.h	/^namespace threadpool {$/;"	n
threadpool	BoundedQueue.h	/^namespace threadpool {$/;"	n
threadpool	Closure.h	/^namespace threadpool {$/;"	n
threadpool	Condition.h	/^namespace threadpool {$/;"	n
threadpool	Logging.h	/^namespace threadpool {$/;"	n
threadpool	MutexLock.h	/^namespace threadpool {$/;"	n
threadpool	NonCopyable.h	/^namespace threadpool {$/;"	n
threadpool	Thread.h	/^namespace threadpool {$/;"	n
threadpool	ThreadPool.cpp	/^namespace threadpool{$/;"	n	file:
threadpool	ThreadPool.h	/^namespace threadpool {$/;"	n
work	Thread.h	/^	static void* work(void* data)$/;"	f	class:threadpool::IThread
~BoundedQueue	BoundedQueue.h	/^	~BoundedQueue()$/;"	f	class:threadpool::BoundedQueue
~Closure0	Closure.h	/^	virtual ~Closure0()$/;"	f	class:threadpool::Closure0
~Closure1	Closure.h	/^	virtual ~Closure1()$/;"	f	class:threadpool::Closure1
~Closure2	Closure.h	/^	virtual ~Closure2() $/;"	f	class:threadpool::Closure2
~Closure3	Closure.h	/^	virtual ~Closure3()$/;"	f	class:threadpool::Closure3
~ClosureInterface	Closure.h	/^	virtual ~ClosureInterface()$/;"	f	class:threadpool::ClosureInterface
~Condition	Condition.h	/^	~Condition()$/;"	f	class:threadpool::Condition
~IThread	Thread.h	/^	virtual ~IThread()$/;"	f	class:threadpool::IThread
~Logger	Logging.h	/^	~Logger() {$/;"	f	class:threadpool::Logger
~MutexLock	MutexLock.h	/^	~MutexLock()$/;"	f	class:threadpool::MutexLock
~MutexLockGuard	MutexLock.h	/^	~MutexLockGuard()$/;"	f	class:threadpool::MutexLockGuard
~NonCopyable	NonCopyable.h	/^	~NonCopyable() {}$/;"	f	class:threadpool::NonCopyable
~ObjClosure0	Closure.h	/^	virtual ~ObjClosure0()$/;"	f	class:threadpool::ObjClosure0
~ObjClosure1	Closure.h	/^	virtual ~ObjClosure1()$/;"	f	class:threadpool::ObjClosure1
~ObjClosure2	Closure.h	/^	virtual ~ObjClosure2()$/;"	f	class:threadpool::ObjClosure2
~ObjClosure3	Closure.h	/^	virtual ~ObjClosure3()$/;"	f	class:threadpool::ObjClosure3
~ThreadPool	ThreadPool.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:threadpool::ThreadPool
~Worker	ThreadPool.cpp	/^Worker::~Worker()$/;"	f	class:threadpool::Worker
